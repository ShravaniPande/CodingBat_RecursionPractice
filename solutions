
1. Given a string, compute recursively (no loops) the number of lowercase 'x' chars in the string.
countX("xxhixx") → 4
countX("xhixhix") → 3
countX("hi") → 0

public int countX(String str) {
  int len = str.length();
  if(len == 0) return 0;
  if(len > 0 && str.charAt(len-1) == 'x') return 1 + countX(str.substring(0,len-1));
  return countX(str.substring(0,len-1));
  
}

2. 
Given a string, compute recursively (no loops) the number of times lowercase "hi" appears in the string.
countHi("xxhixx") → 1
countHi("xhixhix") → 2
countHi("hi") → 1

public int countHi(String str) {
  int len = str.length();
  if(len < 2) return 0;
  
  if(str.charAt(0) == 'h' && str.charAt(1) == 'i'){
    return 1 + countHi(str.substring(2));
  }
  return countHi(str.substring(1));
  
}

3. 
Given a string, compute recursively (no loops) a new string where all the lowercase 'x' chars have been changed to 'y' chars.
changeXY("codex") → "codey"
changeXY("xxhixx") → "yyhiyy"
changeXY("xhixhix") → "yhiyhiy"

public String changeXY(String str) {
  char [] charArr = str.toCharArray();
  helper(charArr,0);
  
  return String.valueOf(charArr);
}

public void helper(char[]charArr, int ind){
  
  if(ind == charArr.length) return;
  if(charArr[ind] == 'x'){
    charArr[ind]='y';
    
  }
  helper(charArr,ind+1);
  
}

4. 
Given a string, compute recursively a new string where all the 'x' chars have been removed.
noX("xaxb") → "ab"
noX("abc") → "abc"
noX("xx") → ""

public String noX(String str) {
  if(str.length() == 0) return str;
  if(str.charAt(0) == 'x'){
    return noX(str.substring(1));
  }
  return str.charAt(0)+ noX(str.substring(1));
}
